import org.jetbrains.kotlin.gradle.dsl.JvmTarget

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath libs.kotlin.gradlePlugin
		classpath libs.kotlin.serialization
		classpath libs.spotless.gradlePlugin
	}
}

apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
apply plugin: 'application'

mainClassName = 'watch.dependency.Main'

dependencies {
	implementation libs.kotlinx.coroutines.core
	implementation libs.kotlinx.serialization.core
	implementation libs.kotlinx.serialization.json
	implementation libs.tomlj
	implementation libs.kotlinx.datetime
	implementation libs.xmlutil.core
	implementation libs.xmlutil.serialization
	implementation libs.clikt
	implementation libs.okhttp.client
	implementation libs.okhttp.logging
	implementation libs.mordant

	testImplementation libs.junit
	testImplementation libs.truth
	testImplementation libs.jimfs
	testImplementation libs.okhttp.mockwebserver
	testImplementation libs.kotlinx.coroutines.test
	testImplementation libs.kotlin.test
}

repositories {
	mavenCentral()
}

tasks.named("distTar").configure { task ->
	task.enabled = false
}
tasks.named("assemble").configure { task ->
	task.dependsOn(tasks.named("installDist"))
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile).configureEach { task ->
	task.compilerOptions {
		jvmTarget = JvmTarget.JVM_1_8
		freeCompilerArgs.addAll(
				'-progressive',
				'-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi',
				'-opt-in=nl.adaptivity.xmlutil.ExperimentalXmlUtilApi',
		)
	}
}

tasks.withType(JavaCompile).configureEach {
	sourceCompatibility = JavaVersion.VERSION_1_8.toString()
	targetCompatibility = JavaVersion.VERSION_1_8.toString()
}

test {
	testLogging {
		showStackTraces = true
		exceptionFormat = 'full'
	}
}

apply plugin: 'com.diffplug.spotless'
spotless {
	kotlin {
		target("src/**/*.kt")
		ktlint(libs.ktlint.get().version).editorConfigOverride([
			'ktlint_standard_filename': 'disabled',
		])
	}
}
